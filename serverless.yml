service: nzshm22-kororaa-api

plugins:
  - serverless-python-requirements
  - serverless-wsgi
package:
  individually: false
  patterns:
    - '!__pycache__/**'
    - '!.git/**'
    - '!.github/**'
    - '!.pytest_cache/**'
    - '!.mypy_cache/**'
    - '!.tox/**'
    - '!dist/**'
    - '!docs/**'
    - '!/**'
    - '!node_modules/**'
    - '!package.json'
    - '!package-log.json'
    - '!tests/**'
    - '!site/**'
    - kororaa_graphql_api/**

custom:
  #serverless-wsgi settings
  wsgi:
    app: kororaa_graphql_api.kororaa_graphql_api.app
    packRequirements: false
    pythonBin: python3

  #serverless-python-requirements settings
  pythonRequirements:
    dockerizePip: true
    slim: true
    # slimPatterns:
    #   - '**/*.egg-info*'
    noDeploy:
      - botocore

  #Lambda warmer see https://www.serverless.com/plugins/serverless-plugin-warmup
  # warmup:
  #   lowConcurrencyWarmer:
  #     enabled: true
  #     events:
  #       - schedule: rate(5 minutes)
  #     concurrency: 1

# DRY constants: define all compound/generated names in one place
# Override args are: .. defaults:
# --app_acroym          signed-uploader
# --s3_bucket           self:custom.app_acronym
# --s3_key_base         self:custom.stage
# --region              us-east-1
# --stage               test
# --deletion_policy     delete

  app_acronym: ${opt:acronym, self:service}
  default_stage: local
  stage: ${opt:stage, self:custom.default_stage}
  stack_name: ${self:custom.app_acronym}-${self:custom.stage}
  region: ${opt:region, self:provider.region}
  deletion_policy: Delete
  # presigned URL TTL
  url_default_ttl: 60

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}
  region: ap-southeast-2
  environment:
    REGION: ${self:custom.region}
    URL_DEFAULT_TTL: ${self:custom.url_default_ttl}
    DEPLOYMENT_STAGE: ${self:custom.stage}

  apiGateway:
    apiKeys:
      - name: TempApiKey-${self:custom.stage}
        description: Api key until we have an auth function # Optional

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
             - "cloudwatch:PutMetricData"
          Resource: "*"
        - Effect: Allow
          Action:
             - "dynamodb:Scan"
             - "dynamodb:DescribeTable"
             - "dynamodb:GetItem"
             - "dynamodb:ConditionCheckItem"
             - "dynamodb:Query"
          Resource:
             - "arn:aws:dynamodb:ap-southeast-2:461564345538:table/THS_HazardAggregation-PROD"
             - "arn:aws:dynamodb:ap-southeast-2:461564345538:table/THS_GriddedHazard-PROD"


functions:
  app:
    description: The graphql API of ${self:service}
    handler: wsgi_handler.handler
    memorySize: 2096 # optional, in MB, default is 1024
    timeout: 20 # optional, in seconds, default is 6
    events:
      - http:
          path: graphql
          method: OPTIONS
      - http:
          path: graphql
          method: POST
          private: true
      - http:
          path: graphql
          method: GET
          private: true
    environment:
      STACK_NAME: ${self:custom.stack_name}
      DEPLOYMENT_STAGE: PROD
      NZSHM22_HAZARD_STORE_STAGE: PROD
      NZSHM22_HAZARD_STORE_REGION: ${self:custom.region}


